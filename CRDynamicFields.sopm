<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.0">
    <Name>CRDynamicFields</Name>
    <Version>0.0.1</Version>
    <Framework>3.3.x</Framework>
    <Vendor>Carlos Rodriguez</Vendor>
    <URL>http://https://github.com/carlosfrodriguez</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <Description Lang="en">The CR Dynamic Fields Package.</Description>
    <Filelist>
        <File Permission="644" Location="Kernel/Config/Files/CRDynamicFields.xml"/>
        <File Permission="644" Location="Kernel/Modules/AdminCRDynamicFieldRadioButton.pm"/>
        <File Permission="644" Location="Kernel/Output/HTML/Standard/AdminCRDynamicFieldRadioButton.dtl"/>
        <File Permission="644" Location="Kernel/System/DynamicField/Driver/CRRadioButton.pm"/>
    </Filelist>
<!--
    <CodeInstall Type="post"><![CDATA[

        # define function name
        my $FunctionName = 'CodeInstall';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        # load the module
        if ( $Self->{MainObject}->Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule->new( %{$Self} );

            if ($CodeObject) {

                # start method
                if ( !$CodeObject->$FunctionName(%{$Self}) ) {
                    $Self->{LogObject}->Log(
                        Priority => 'error',
                        Message  => "Could not call method $FunctionName() on $CodeModule.pm."
                    );
                }
            }

            # error handling
            else {
                $Self->{LogObject}->Log(
                    Priority => 'error',
                    Message  => "Could not call method new() on $CodeModule.pm."
                );
            }
        }

    ]]></CodeInstall>
    <CodeReinstall Type="post"><![CDATA[

        # define function name
        my $FunctionName = 'CodeReinstall';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        # load the module
        if ( $Self->{MainObject}->Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule->new( %{$Self} );

            if ($CodeObject) {

                # start method
                if ( !$CodeObject->$FunctionName(%{$Self}) ) {
                    $Self->{LogObject}->Log(
                        Priority => 'error',
                        Message  => "Could not call method $FunctionName() on $CodeModule.pm."
                    );
                }
            }

            # error handling
            else {
                $Self->{LogObject}->Log(
                    Priority => 'error',
                    Message  => "Could not call method new() on $CodeModule.pm."
                );
            }
        }

    ]]></CodeReinstall>
    <CodeUpgrade Type="post"><![CDATA[

        # define function name
        my $FunctionName = 'CodeUpgrade';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        # The code module has just recently been copied to it's location in the file system.
        # In a persistent Perl environment an old version of the module might still be loaded,
        # as watchdogs like Apache2::Reload haven't had a chance to reload it.
        # So we need to make sure that the new version is being loaded.
        # Kernel::System::Main::Require() checks the relative file path, so we need to remove that from %INC.
        # This is only needed in persistent Perl environment, but does no harm in a CGI environment.
        my $CodeModulePath = $CodeModule;
        $CodeModulePath =~ s/::/\//g;
        $CodeModulePath .= '.pm';
        delete $INC{$CodeModulePath};

        # load the module
        if ( $Self->{MainObject}->Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule->new( %{$Self} );

            if ($CodeObject) {

                # start method
                if ( !$CodeObject->$FunctionName(%{$Self}) ) {
                    $Self->{LogObject}->Log(
                        Priority => 'error',
                        Message  => "Could not call method $FunctionName() on $CodeModule.pm."
                    );
                }
            }

            # error handling
            else {
                $Self->{LogObject}->Log(
                    Priority => 'error',
                    Message  => "Could not call method new() on $CodeModule.pm."
                );
            }
        }

    ]]></CodeUpgrade>
    <CodeUpgrade Type="post" Version="1.0.25"><![CDATA[

        # define function name
        my $FunctionName = 'CodeUpgradeFromLowerThan_1_0_25';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        # load the module
        if ( $Self->{MainObject}->Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule->new( %{$Self} );

            if ($CodeObject) {

                # start methode
                if ( !$CodeObject->$FunctionName(%{$Self}) ) {
                    $Self->{LogObject}->Log(
                        Priority => 'error',
                        Message  => "Could not call method $FunctionName() on $CodeModule.pm."
                    );
                }
            }

            # error handling
            else {
                $Self->{LogObject}->Log(
                    Priority => 'error',
                    Message  => "Could not call method new() on $CodeModule.pm."
                );
            }
        }

    ]]></CodeUpgrade>
    <CodeUninstall Type="pre"><![CDATA[

        # define function name
        my $FunctionName = 'CodeUninstall';

        # create the package name
        my $CodeModule = 'var::packagesetup::' . $Param{Structure}->{Name}->{Content};

        # load the module
        if ( $Self->{MainObject}->Require($CodeModule) ) {

            # create new instance
            my $CodeObject = $CodeModule->new( %{$Self} );

            if ($CodeObject) {

                # start methode
                if ( !$CodeObject->$FunctionName(%{$Self}) ) {
                    $Self->{LogObject}->Log(
                        Priority => 'error',
                        Message  => "Could not call method $FunctionName() on $CodeModule.pm.",
                    );
                }
            }

            # error handling
            else {
                $Self->{LogObject}->Log(
                    Priority => 'error',
                    Message  => "Could not call method new() on $CodeModule.pm.",
                );
            }
        }

    ]]></CodeUninstall>
-->
    <IntroInstall Type="pre" Title="Install Information" Lang="en"><![CDATA[
        <br/>
        <strong>WELCOME</strong>
        <br/>
        <br/>
        You are about to install the package CRDynamicFields.<br/>
        <br/>
        <br/>
        ((enjoy))<br/>
        <br/>
    ]]></IntroInstall>
    <IntroInstall Type="pre" Title="Installation Information" Lang="de"><![CDATA[
        <br/>
        <strong>WILLKOMMEN</strong>
        <br/>
        <br/>
        Sie sind im Begriff das Paket CRDynamicFields zu installieren.<br/>
        <br/>
        <br/>
        ((enjoy))<br/>
        <br/>
    ]]></IntroInstall>
    <IntroInstall Type="pre" Title="Install Information" Lang="es"><![CDATA[
        <br/>
        <strong>BIENVENIDO</strong>
        <br/>
        <br/>
        Usted est&aacute; a punto de instalar el paquete CRDynamicFields.<br/>
        <br/>
        <br/>
        ((enjoy))<br/>
        <br/>
    ]]></IntroInstall>
    <IntroUpgrade Type="pre" Title="Upgrade Information" Lang="en"><![CDATA[
        <br/>
        <strong>WELCOME</strong>
        <br/>
        <br/>
        You are about to upgrade the package CRDynamicFields.<br/>
        <br/>
        <br/>
        ((enjoy))<br/>
        <br/>
    ]]></IntroUpgrade>
    <IntroUpgrade Type="pre" Title="Upgrade Information" Lang="de"><![CDATA[
        <br/>
        <strong>WILLKOMMEN</strong>
        <br/>
        <br/>
        Sie sind im Begriff das Paket CRDynamicFields zu aktualisieren.<br/>
        <br/>
        <br/>
        ((enjoy))<br/>
        <br/>
    ]]></IntroUpgrade>
    <IntroUpgrade Type="pre" Title="Upgrade Information" Lang="es"><![CDATA[
        <br/>
        <strong>BIENVENIDO</strong>
        <br/>
        <br/>
        Usted est&aacute; apunto de actualizar el paquete CRDynamicFields.<br/>
        <br/>
        <br/>
        ((enjoy))<br/>
        <br/>
    ]]></IntroUpgrade>
    <IntroUninstall Type="pre" Title="Uninstallation Information" Lang="en"><![CDATA[
        <br/>
        <strong>ATTENTION</strong>
        <br/>
        <br/>
        Before uninstall the package please make sure that all dynamic fields from a type
        defined in this package are removed from the system.
        <br/>
        <br/>
        ((enjoy))<br/>
        <br/>
    ]]></IntroUninstall>
    <IntroUninstall Type="pre" Title="Uninstallation Information" Lang="es"><![CDATA[
        <br/>
        <strong>ATENCI&Oacute;N</strong>
        <br/>
        <br/>
        Antes de desinstalar este paquete por favor asegúrese que todos los campos dinámicos de
        algún tipo definido en este paquete, sean removidos del sistema.
        <br/>
        <br/>
        ((enjoy))<br/>
        <br/>
    ]]></IntroUninstall>
</otrs_package>
